server:
  port: 9096


#spring:
#  datasource:
#    data-username: test
#    data-password: 123456
#spring:
#  h2:
#    console:
#      enabled: true
spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://jadefromkorea.iptime.org:3306/test_db
    username: test
    password: 123456

  jpa:
    show-sql: true
    generate-ddl: true




#server:
#  port: 8080
#  servlet:
#    context-path: /
#
#spring:
#  mvc:
#    view:
#      prefix: /WEB-INF/views/
#      suffix: .jsp
#
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/ssar?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
#    username: ssar
#    password: bitc5600
#
#  jpa:
#    open-in-view: false
#    hibernate:
#      ddl-auto: update
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#      use-new-id-generator-mappings: false
#    show-sql: true
#    properties:
#      hibernate.enable_lazy_load_no_trans: true
#      hibernate.format_sql: true
#
#  http:
#    encoding:
#      charset: UTF-8
#      enabled: true
#      force: true


#  1. JPA-Hibernate 고유 기능 사용
#  spring.jpa.generate-ddl 속성
#  true로 설정 시, Entity 어노테이션(@Entity)이 명시된 클래스를 찾아서 ddl을 생성하고 실행
#  spring.jpa.hiberante.ddl-auto 속성
#  옵션
#- none: 자동 생성하지 않음
#create: 항상 다시 생성
#create-drop: 시작 시 생성 후 종료 시 제거
#update: 시작 시 Entity 클래스와 DB 스키마 구조를 비교해서 DB쪽에 생성되지 않은 테이블, 컬럼 추가 (제거는 하지 않음)
#validate: 시작 시 Entity 클래스와 DB 스키마 구조를 비교해서 같은지만 확인 (다르면 예외 발생)
#  "시작", "종료"는 hibernate SessionFactory를 기준으로 하며, SessionFactory는 transaction 처리를 위한 Session을 관리해주는 객체 (SessionFactory의 life cycle이나 자세한 기능은 따로 알아봐야..)
#  ddl-auto를 create나 create-drop으로 설정 시 classpath 경로의 import.sql 파일이 있으면 파일 내의 query들을 hibernate가 자동으로 실행(spring boot와는 관계 없음)
#  2. Spring Boot 기능 사용 (Hibernate 기능과 별개)
#  spring.datasource.initialization-mode를 alwasy로 설정해야 외장 DB 초기화 가능
#- 설정하지 않으면 기본으로 never로 설정: Embedded DB 사용 -> ex. HSQL, H2, Derby
#  spring.datasource.data에 sql 파일 경로를 지정하면 지정된 파일의 스크립트를 실행
#- ex. spring.datasource.data=classpath:member.sql, book.sql
#  기본값은 classpath:schema.sql, classpath:data.sql
#  DB 종류에 따라 다른 스크립트를 사용하려면 spring.datasource.platform을 해당 DB종류(ex. mysql, posgresql)로 설정하고 schema-mysql.sql, data-mysql.sql과 같이 사용